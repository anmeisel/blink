import {
  __commonJS,
  require_react
} from "./chunk-4YP5LC2O.js";

// node_modules/react-fetch-hook/utils/flattenInput.js
var require_flattenInput = __commonJS({
  "node_modules/react-fetch-hook/utils/flattenInput.js"(exports, module) {
    function flattenInput() {
      var res = [];
      for (var i = 0; i < arguments.length; i++) {
        var input = arguments[i];
        if (input instanceof Array) {
          for (var j = 0; j < input.length; j++) {
            res = res.concat(flattenInput(input[j]));
          }
        } else if (typeof URL !== "undefined" && input instanceof URL) {
          res = res.concat(input.toJSON());
        } else if (input instanceof Object) {
          var keys = Object.keys(input);
          for (var k = 0; k < keys.length; k++) {
            var key = keys[k];
            res = res.concat([key]).concat(flattenInput(input[key]));
          }
        } else {
          res = res.concat(input);
        }
      }
      return res;
    }
    module.exports = flattenInput;
  }
});

// node_modules/react-fetch-hook/usePromise.js
var require_usePromise = __commonJS({
  "node_modules/react-fetch-hook/usePromise.js"(exports, module) {
    var React = require_react();
    var flattenInput = require_flattenInput();
    function usePromise(callFunction) {
      var inputs = Array.prototype.slice.call(arguments, [1]);
      var state = React.useState({
        isLoading: !!callFunction
      });
      React.useEffect(function() {
        if (!callFunction) {
          return;
        }
        !state[0].isLoading && state[1]({ data: state[0].data, isLoading: true });
        callFunction.apply(null, inputs).then(function(data) {
          state[1]({
            data,
            isLoading: false
          });
        }).catch(function(error) {
          state[1]({
            error,
            isLoading: false
          });
        });
      }, flattenInput(inputs));
      return state[0];
    }
    module.exports = usePromise;
  }
});

// node_modules/react-fetch-hook/index.js
var require_react_fetch_hook = __commonJS({
  "node_modules/react-fetch-hook/index.js"(exports, module) {
    var usePromise = require_usePromise();
    function UseFetchError(status, statusText, message, fileName, lineNumber) {
      var instance = new Error(message, fileName, lineNumber);
      instance.name = "UseFetchError";
      instance.status = status;
      instance.statusText = statusText;
      Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
      if (Error.captureStackTrace) {
        Error.captureStackTrace(instance, UseFetchError);
      }
      return instance;
    }
    UseFetchError.prototype = Object.create(Error.prototype, {
      constructor: {
        value: Error,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(UseFetchError, Error);
    function useFetch(path, options, specialOptions) {
      var blocked = (specialOptions && specialOptions.depends || options && options.depends || []).reduce(function(acc, dep) {
        return acc || !dep;
      }, false);
      return usePromise(
        !blocked && function(p, o, s) {
          return fetch(p, o).then(s && s.formatter || o && o.formatter || function(response) {
            if (!response.ok) {
              throw new UseFetchError(
                response.status,
                response.statusText,
                "Fetch error"
              );
            }
            return response.json();
          });
        },
        path,
        options || {},
        specialOptions || {}
      );
    }
    module.exports = useFetch;
  }
});
export default require_react_fetch_hook();
//# sourceMappingURL=react-fetch-hook.js.map
